(base) dok@just:~/repos/llama-cpp-agent$ python examples/03_Tools_And_Function_Calling/query_agent.py
User: List all active tasks of Jane.
[INST] Read and follow the instructions below:

<system_instructions>
You are Funky, an AI assistant that calls functions to perform tasks. You are thoughtful, give nuanced answers, and are brilliant at reasoning. Below is a list of functions you can use to interact with the system. Each function has specific parameters and requirements. Make sure to follow the instructions for each function carefully.
Choose the appropriate function based on the task you want to perform. Provide your function calls in JSON format.
</system_instructions>

You can call functions to help you with your tasks and user queries. The available functions are:

<function_list>
Function: query
  Description: The query function serves as a versatile and powerful tool for interacting with a knowledge base or an information retrieval system. It provides a flexible interface for retrieving, storing, and manipulating data.
  Parameters:
    query (str): The query string or expression that defines the information to retrieve or manipulate. It can be in a specific query language or a flexible natural language format.
    source (str or null): Specifies the data source or knowledge base to query. It can be a URL, a file path, or a unique identifier.
    variables (Dict or null): An object containing variables and their values to parameterize the query. This allows for dynamic and reusable queries.
    options (Dict or null): An object containing additional options or configurations for the query, such as pagination, sorting, or custom settings.

Function: send_message
  Description: Sends a message to the user.
  Parameters:
    content (str): Content of the message to be sent.

Function: read_text_file
  Description: Reads the content of a file.
  Parameters:
    file_path (str): The path to the file.

Function: write_text_file
  Description: Writes content to a file.
  Parameters:
    file_path (str): The path to the file.
    content (str): The content to write to the file.
</function_list>

To call a function, respond with a JSON object (to call one function) or a list of JSON objects (to call multiple functions), with each object containing these fields:

- "thoughts_and_reasoning": Write your thoughts and reasoning for calling the function here. Think step-by-step about what information you need.
- "function": Put the name of the function to call here.
- "arguments": Put the arguments to pass to the function here.

The result of each function call will be returned to you before you need to respond again.

List all active tasks of Jane. [/INST] [
  {
    "thoughts_and_reasoning": "To list all active tasks of Jane, I need to query the task management system. I will use the 'query' function with appropriate parameters.",
    "function": "query",
    "arguments": {
      "query": "SELECT * FROM tasks WHERE user='Jane' AND status='active';",
      "source": "task_management_system",
      "variables": {},
      "options": {}
    }
  }
]
[INST] Read and follow the instructions below:

<system_instructions>
You are Funky, an AI assistant that calls functions to perform tasks. You are thoughtful, give nuanced answers, and are brilliant at reasoning. Below is a list of functions you can use to interact with the system. Each function has specific parameters and requirements. Make sure to follow the instructions for each function carefully.
Choose the appropriate function based on the task you want to perform. Provide your function calls in JSON format.
</system_instructions>

You can call functions to help you with your tasks and user queries. The available functions are:

<function_list>
Function: query
  Description: The query function serves as a versatile and powerful tool for interacting with a knowledge base or an information retrieval system. It provides a flexible interface for retrieving, storing, and manipulating data.
  Parameters:
    query (str): The query string or expression that defines the information to retrieve or manipulate. It can be in a specific query language or a flexible natural language format.
    source (str or null): Specifies the data source or knowledge base to query. It can be a URL, a file path, or a unique identifier.
    variables (Dict or null): An object containing variables and their values to parameterize the query. This allows for dynamic and reusable queries.
    options (Dict or null): An object containing additional options or configurations for the query, such as pagination, sorting, or custom settings.

Function: send_message
  Description: Sends a message to the user.
  Parameters:
    content (str): Content of the message to be sent.

Function: read_text_file
  Description: Reads the content of a file.
  Parameters:
    file_path (str): The path to the file.

Function: write_text_file
  Description: Writes content to a file.
  Parameters:
    file_path (str): The path to the file.
    content (str): The content to write to the file.
</function_list>

To call a function, respond with a JSON object (to call one function) or a list of JSON objects (to call multiple functions), with each object containing these fields:

- "thoughts_and_reasoning": Write your thoughts and reasoning for calling the function here. Think step-by-step about what information you need.
- "function": Put the name of the function to call here.
- "arguments": Put the arguments to pass to the function here.

The result of each function call will be returned to you before you need to respond again.

List all active tasks of Jane. [/INST][
  {
    "thoughts_and_reasoning": "To list all active tasks of Jane, I need to query the task management system. I will use the 'query' function with appropriate parameters.",
    "function": "query",
    "arguments": {
      "query": "SELECT * FROM tasks WHERE user='Jane' AND status='active';",
      "source": "task_management_system",
      "variables": {},
      "options": {}
    }
  }
]</s>[INST] Function Calling Results:

1. Function: "query"
Return Value: [{'name': 'Project A', 'description': 'This is Project A for buying new socks.', 'start_date': '2022-01-01', 'end_date': '2022-12-31', 'status': 'In Progress', 'team_members': ['John Doe', 'Jane Doe'], 'tasks': [{'name': 'Fetch', 'description': 'Fetch 100 pairs of socks from the warehouse.', 'status': 'In progress', 'assigned_to': 'John Doe', 'due_date': '2022-01-31'}, {'name': 'Choose', 'description': 'Choose the best socks for the team.', 'status': 'In Progress', 'assigned_to': 'Jane Doe', 'due_date': '2022-02-28'}]}] [/INST] [
  {
    "thoughts_and_reasoning": "The 'query' function successfully retrieved the active tasks of Jane from the task management system. The result shows that Project A is currently in progress, with John Doe and Jane Doe as team members. There are two tasks within this project: Fetch and Choose.",
    "function": "send_message",
    "arguments": {
      "content": "Project A for buying new socks is currently in progress. John Doe and Jane Doe are the team members working on this project. The tasks include Fetch (assigned to John Doe) and Choose (assigned to Jane Doe)."
    }
  }
]
Assistant: Project A for buying new socks is currently in progress. John Doe and Jane Doe are the team members working on this project. The tasks include Fetch (assigned to John Doe) and Choose (assigned to Jane Doe).
